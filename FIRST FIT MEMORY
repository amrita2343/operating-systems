#include &lt;stdio.h&gt;
#define MAX_BLOCKS 10
#define MAX_PROCESSES 10
void firstFit(int blockSize[], int blocks, int processSize[], int processes) {
int allocation[MAX_PROCESSES]; // Stores block allocated to each process
for (int i = 0; i &lt; processes; i++) {
allocation[i] = -1; // Initialize all allocations to -1 (not allocated)
}
for (int i = 0; i &lt; processes; i++) {
for (int j = 0; j &lt; blocks; j++) {
if (blockSize[j] &gt;= processSize[i]) {
allocation[i] = j; // Allocate block j to process i
blockSize[j] -= processSize[i]; // Reduce the available memory
break; // Move to the next process
}
}
}
printf(&quot;\nProcess No.\tProcess Size\tBlock No.\n&quot;);
for (int i = 0; i &lt; processes; i++) {
printf(&quot;%d\t\t%d\t\t&quot;, i + 1, processSize[i]);
if (allocation[i] != -1)
printf(&quot;%d\n&quot;, allocation[i] + 1);
else
printf(&quot;Not Allocated\n&quot;);
}
}
int main() {
int blockSize[MAX_BLOCKS], processSize[MAX_PROCESSES];
int blocks, processes;

printf(&quot;Enter the number of memory blocks: &quot;);
scanf(&quot;%d&quot;, &amp;blocks);
printf(&quot;Enter the sizes of %d memory blocks: &quot;, blocks);
for (int i = 0; i &lt; blocks; i++) {
scanf(&quot;%d&quot;, &amp;blockSize[i]);
}
printf(&quot;Enter the number of processes: &quot;);
scanf(&quot;%d&quot;, &amp;processes);
printf(&quot;Enter the sizes of %d processes: &quot;, processes);
for (int i = 0; i &lt; processes; i++) {
scanf(&quot;%d&quot;, &amp;processSize[i]);
}
firstFit(blockSize, blocks, processSize, processes);
return 0;
}
